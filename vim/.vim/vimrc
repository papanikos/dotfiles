" Enable syntax highlighting
set syntax=on


call plug#begin('~/.vim/plugged')

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'neoclide/coc.nvim', { 'branch' : 'release' }
Plug 'sheerun/vim-polyglot'
Plug 'ap/vim-css-color'
Plug 'tpope/vim-commentary'
Plug 'sainnhe/gruvbox-material'

call plug#end()

" Space is the leader now
nnoremap <SPACE> <Nop>
let mapleader= " "

" For snakefiles and modules
au BufNewFile,BufRead *Snakefile set syntax=snakemake
au BufNewFile,BufRead *.smk set syntax=snakemake

" Default python srcipt skeleton
" autocmd BufNewFile *.py 0r ~/.vim/skeletons/pyscript.py

" Automatic indentation
filetype indent on
set autoindent

" Automatically write when switching buffers
set autowrite

" Line numbering
set number
set relativenumber

" Tab formatting
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4 " the visible width of tabs
set softtabstop=4 " edit as if the tabs are 4 characters wide
set shiftwidth=4 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'
set expandtab

" Backspace works as expected with whitespace
set backspace=2

" Mouse
set mouse=a

" Mouse should work in byobu, alacitty, whatever
set ttymouse=sgr

set scrolloff=5
set nowrap
" Show these characters with :set list
set listchars=tab:→\ ,trail:⋅,extends:❯,precedes:❮,eol:¬,

" Incremental search
set incsearch
" Turn on search highlighting for all results
set hlsearch
" Hit <Enter> to remove the highlighting once done
nnoremap <silent> <CR> :noh<CR>

" Statusline using airline
set noshowmode

" Use univesal clipboard for copy pasting
" Requires +clipboard (not sure about +xterm_clipboard)
set clipboard=unnamedplus

" Highlight column 79 for wrapping code
set colorcolumn=79

" jk escapes insert mode
inoremap jk <Esc>

"Become a pro
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>

" Windows/Splits
" Simplify window switching
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Default split on the right for vertical
set splitbelow
set splitright

" Make true colors work always
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif

" Fancy status line
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='bubblegum'

set background=dark
let g:gruvbox_material_ui_contrast='high'
let g:gruvbox_material_background='hard'
let g:gruvbox_material_disable_italic_comment=1
let g:gruvbox_material_palette='mix'
colorscheme gruvbox-material

" CoC
let g:coc_node_path ='/home/nikos/.local/node-v16.15.1-linux-x64/bin/node'
" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
      let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

inoremap <silent><expr> <Tab>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<Tab>" :
        \ coc#refresh()

" Show help for function
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
        call CocActionAsync('doHover')
    else
        execute '!' . &keywordprg . " " . expand('<cword>')
    endif
endfunction

" Coc explorer
nmap <leader>e :CocCommand explorer<CR>
